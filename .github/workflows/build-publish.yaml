name: 'Build & Publish Container images'

on:
  push:
  pull_request:
  release:

permissions:
  contents: 'read'

jobs:
  build:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout Repository 🛎️'
        uses: 'actions/checkout@v3'
      - name: 'Use Node.js 📗'
        uses: 'actions/setup-node@v3'
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      - name: 'Install packages 📥'
        run: 'npm install'

      - name: 'Build 🏗'
        run: 'NODE_ENV=production npm run build'

      - name: 'Cache build 🧩'
        uses: 'dudeofawesome/cache-build-artifact@v1'
        with:
          archive-name: 'build'

  lint:
    needs: 'build'
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Get cached build 🧩'
        uses: 'dudeofawesome/retrieve-build-artifact@v1'
        with:
          archive-name: 'build'
      - name: 'Use Node.js 📗'
        uses: 'actions/setup-node@v3'
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 'Lint 🚨'
        run: 'npm run lint'

  test:
    needs: 'build'
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Get cached build 🧩'
        uses: 'dudeofawesome/retrieve-build-artifact@v1'
        with:
          archive-name: 'build'
      - name: 'Use Node.js 📗'
        uses: 'actions/setup-node@v3'
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 'Test 🧪'
        run: 'npm run test'

  build-container:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout Repository 🛎️'
        uses: 'actions/checkout@v3'
      - uses: 'docker/setup-buildx-action@v2'

      - name: 'Get node version 📗'
        id: 'node-version'
        run: |
          echo "node_version=$(cat '.nvmrc')" >> "$GITHUB_OUTPUT"
      - name: 'Get image tag names 🏷️'
        id: 'tag-image'
        run: |
          container_repo="ghcr.io/$(echo "${{ github.repository }}" | tr '[A-Z]' '[a-z]')"
          versions="${{ github.ref_name }}"
          if [[ "${{ github.ref_type }}" == "branch" ]]; then
            package_json_version="$(jq --raw-output '.version' 'package.json')"
            versions="$versions,$package_json_version"
          fi

          echo "$versions"

          # Use Docker `latest` tag convention, only tagging `latest` on default branch.
          if [[ "$versions" =~ ,?${{ github.event.repository.default_branch }},? ]]; then
            versions="$versions,latest"
          fi

          versions=$(echo $versions | tr ',' '\n')
          image_tags="bot"
          for version in $versions; do
            image_tags="$image_tags,$container_repo/bot:$version"
          done

          echo "image_tags=$image_tags" >> "$GITHUB_OUTPUT"

      - name: 'Build container 🐳'
        uses: 'docker/build-push-action@v3'
        with:
          file: 'Dockerfile'
          build-args: 'NODE_VERSION=${{ steps.node-version.outputs.node_version }}'
          tags: 'bot,${{ steps.tag-image.outputs.image_tags }}'
          cache-from: 'type=gha'
          cache-to: 'type=gha,mode=max'

    outputs:
      node_version: '${{ steps.node-version.outputs.node_version }}'
      image_tags: '${{ steps.tag-image.outputs.image_tags }}'

  publish:
    needs:
      - 'build-container'
      - 'lint'
      - 'test'
    if: "contains(needs.build-container.outputs.image_tags.includes, ':latest')"
    runs-on: 'ubuntu-latest'
    permissions:
      packages: 'write'
    steps:
      - name: 'Checkout Repository 🛎️'
        uses: 'actions/checkout@v3'
      - uses: 'docker/setup-buildx-action@v2'
      - name: 'Login to GitHub Container Registry 🔑'
        uses: 'docker/login-action@v2'
        with:
          registry: 'ghcr.io'
          username: '${{ github.repository_owner }}'
          password: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'Publish to Registry 💨'
        uses: 'docker/build-push-action@v3'
        with:
          build-args: 'NODE_VERSION=${{ needs.build-container.outputs.node_version }}'
          push: true
          tags: '${{ needs.build-container.outputs.image_tags }}'
          cache-from: 'type=gha'
